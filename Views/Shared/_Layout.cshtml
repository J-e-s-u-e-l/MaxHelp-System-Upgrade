<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    @* <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" /> *@
    @* <link rel="stylesheet" href="~/MaxHelp_System_Upgrade.styles.css" asp-append-version="true" /> *@
</head>
<body>
    <header>
        <nav class="navbar fixed-top navbar-expand-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <button id="sidebarToggle" class="btn me-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-layout-sidebar-inset" viewBox="0 0 16 16">
                        <rect class="svg-bg" width="43.9706" height="39" rx="8.28431" fill="#F2F1F1" />
                        <path d="M14 2a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zM2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2z" />
                        <path d="M3 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1z" />
                    </svg> <!-- Hamburger icon -->
                </button>

                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">MHELP</a>
                
                <button id="notificationBell" class="notification-btn btn ms-auto me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="44" height="39" viewBox="0 0 44 39" fill="none">
                        <rect class="svg-bg" width="43.9706" height="39" rx="8.28431" fill="#F2F1F1" />
                        <path class="svg-path" d="M16.3772 15.7617C16.3772 14.2744 16.968 12.848 18.0197 11.7963C19.0713 10.7446 20.4977 10.1538 21.985 10.1538C23.4723 10.1538 24.8987 10.7446 25.9504 11.7963C27.002 12.848 27.5929 14.2744 27.5929 15.7617C27.5929 22.3041 30.3968 24.1734 30.3968 24.1734H13.5732C13.5732 24.1734 16.3772 22.3041 16.3772 15.7617Z" stroke="#121212" stroke-opacity="0.8" stroke-width="1.86928" stroke-linecap="round" stroke-linejoin="round" />
                        <path class="svg-path" d="M20.3965 27.9119C20.5529 28.1964 20.7829 28.4337 21.0624 28.599C21.3419 28.7643 21.6607 28.8515 21.9854 28.8515C22.3101 28.8515 22.6288 28.7643 22.9083 28.599C23.1878 28.4337 23.4178 28.1964 23.5743 27.9119" stroke="#121212" stroke-opacity="0.8" stroke-width="1.86928" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <span id="notificationBadge" class="badge bg-danger">0</span>
                </button>


                @* <button id="notificationBell" class="notification-btn btn ms-auto me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="44" height="39" viewBox="0 0 44 39" fill="none">
                        <rect class="svg-bg" width="43.9706" height="39" rx="8.28431" fill="#F2F1F1" />
                        <path class="svg-path" d="M16.3772 15.7617C16.3772 14.2744 16.968 12.848 18.0197 11.7963C19.0713 10.7446 20.4977 10.1538 21.985 10.1538C23.4723 10.1538 24.8987 10.7446 25.9504 11.7963C27.002 12.848 27.5929 14.2744 27.5929 15.7617C27.5929 22.3041 30.3968 24.1734 30.3968 24.1734H13.5732C13.5732 24.1734 16.3772 22.3041 16.3772 15.7617Z" stroke="#121212" stroke-opacity="0.8" stroke-width="1.86928" stroke-linecap="round" stroke-linejoin="round" />
                        <path class="svg-path" d="M20.3965 27.9119C20.5529 28.1964 20.7829 28.4337 21.0624 28.599C21.3419 28.7643 21.6607 28.8515 21.9854 28.8515C22.3101 28.8515 22.6288 28.7643 22.9083 28.599C23.1878 28.4337 23.4178 28.1964 23.5743 27.9119" stroke="#121212" stroke-opacity="0.8" stroke-width="1.86928" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </button> *@
                
                <a asp-controller="Settings" asp-action="Index">
                    <button id="profileButton" class="profile-btn btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="current" viewBox="0 0 16 16">
                            <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                            <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                        </svg>
                    </button>
                </a>
            </div>
        </nav>
    </header>

    <!-- Sidebar -->
    <div id="sidebar" class="sidebar">
        <button class="close-sidebar btn btn-sm btn-outline-danger">X</button>
        @* <span class="close-sidebar">&times;</span> <!-- Close Button --> *@
        <nav class="nav gap-4 fw-bolder flex-column align-content-center justify-content-center">
            <a class="nav-link" asp-controller="Dashboard" asp-action="Index">Dashboard</a>
            <a class="nav-link" asp-controller="Inventory" asp-action="Index">Inventory</a>
            <a class="nav-link" asp-controller="SalesReport" asp-action="Index">Sales Report</a>
            <a class="nav-link" asp-controller="Feedback" asp-action="Index">Feedback</a>
            <a class="nav-link" asp-controller="Settings" asp-action="Index">Settings</a>
        </nav>
    </div>

    <!-- Main Content -->
    <div id="mainContent" class="main-content">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    @* <!-- Notification Panel -->
    <div id="notificationPanel" class="notification-panel">
        <!-- Notifications will be dynamically populated here -->
    </div> *@

    <!-- Notification Panel -->
    <div id="notificationPanel" class="notification-panel">
        <div id="loadingSpinner" class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <button id="closeNotification" class="btn btn-sm btn-outline-danger">X</button>
        <!-- Notifications will be dynamically populated here -->
    </div>



    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Notification Panel Toggle
        const notificationPanel = document.getElementById("notificationPanel");
        const notificationBell = document.getElementById("notificationBell");

        // Function to toggle panel visibility
        function openNotificationPanel() {
            notificationPanel.classList.add("active");
        }

        function closeNotificationPanel() {
            notificationPanel.classList.remove("active");
        }

        // Attach event listener to notification bell to open the panel
        notificationBell.addEventListener("click", openNotificationPanel);

        // Attach event listener to close button
        function attachCloseEventListener() {
            const closeButton = document.getElementById("closeNotification");
            if (closeButton) {
                closeButton.addEventListener("click", closeNotificationPanel);
            }
        }

        // AJAX request to load notifications
        document.addEventListener("DOMContentLoaded", function () {
            const notificationPanel = document.getElementById("notificationPanel");
            const notificationBadge = document.getElementById("notificationBadge");

            fetch('https://localhost:7171/Notification/GetNotifications')
                .then(response => response.json())
                .then(data => {
                    console.log('Notifications:', data);

                    // Hide the loading spinner
                    document.getElementById("loadingSpinner").style.display = "none";

                    // Update the badge count
                    const notificationCount = data.length;
                    if (notificationCount > 0) {
                        notificationBadge.textContent = notificationCount;
                        notificationBadge.style.display = 'inline';
                    } else {
                        notificationBadge.style.display = 'none';
                    }

                    // Clear existing content inside the notification panel
                    notificationPanel.innerHTML = `
                        <div class="notification-header">
                            <h5>Notifications</h5>
                            <button id="closeNotification" class="btn btn-sm btn-outline-danger">X</button>
                        </div>
                    `;

                    // Populate the notification panel with data
                    data.forEach(notification => {
                        const notificationItem = document.createElement('div');
                        notificationItem.className = 'notification-item';
                        notificationItem.innerHTML = `
                            <h3>${notification.businessUnitName}</h3>
                            <p>${notification.itemName} is almost out of stock.</p>
                        `;
                        notificationPanel.appendChild(notificationItem);
                    });

                    // Rebind the close button functionality
                    document.getElementById("closeNotification").addEventListener("click", () => {
                        notificationPanel.classList.remove("active");
                    });
                })
                .catch(error => {
                    console.error('Error fetching notifications:', error);
                    document.getElementById("loadingSpinner").style.display = "none";
                    notificationPanel.innerHTML = `<p>Error loading notifications. Please try again later.</p>`;
                });
        });



        // document.addEventListener("DOMContentLoaded", function () {
        //     const notificationPanel = document.getElementById("notificationPanel");

        //     fetch('https://localhost:7171/Notification/GetNotifications')
        //         .then(response => response.json())
        //         .then(data => {
        //             console.log('Notifications:', data); // Log the data for debugging

        //             // Hide the loading spinner
        //             document.getElementById("loadingSpinner").style.display = "none";

        //             // Clear existing content inside the notification panel
        //             notificationPanel.innerHTML = `
        //                 <div class="notification-header">
        //                     <h5>Notifications</h5>
        //                     <button id="closeNotification" class="btn btn-sm btn-outline-danger">X</button>
        //                 </div>
        //             `;

        //             // Check if notifications are empty
        //             if (!data || data.length === 0) {
        //                 const noNotificationsItem = document.createElement('div');
        //                 noNotificationsItem.className = 'notification-item';
        //                 noNotificationsItem.innerHTML = `<p>No notifications available.</p>`;
        //                 notificationPanel.appendChild(noNotificationsItem);
        //                 return;
        //             }

        //             // Populate the notification panel with data
        //             data.forEach(notification => {
        //                 const notificationItem = document.createElement('div');
        //                 notificationItem.className = 'notification-item';
        //                 notificationItem.innerHTML = `
        //                     <h3>${notification.businessUnitName}</h3>
        //                     <p>${notification.itemName} is almost out of stock.</p>
        //                 `;
        //                 notificationPanel.appendChild(notificationItem);
        //             });

        //             // Rebind the close button functionality
        //             document.getElementById("closeNotification").addEventListener("click", () => {
        //                 notificationPanel.classList.remove("active");
        //             });
        //         })
        //         .catch(error => {
        //             console.error('Error fetching notifications:', error);
        //             document.getElementById("loadingSpinner").style.display = "none";
        //             notificationPanel.innerHTML = `<p>Error loading notifications. Please try again later.</p>`;
        //         });
        // });

        // Sidebar Toggle
        const sidebar = document.getElementById("sidebar");
        const mainContent = document.getElementById("mainContent");
        const closeSidebarBtn = document.querySelector(".close-sidebar");
        document.getElementById("sidebarToggle").addEventListener("click", () => {
            sidebar.classList.toggle("active");
            mainContent.classList.toggle("shifted");
        });
        closeSidebarBtn.addEventListener("click", () => {
            sidebar.classList.remove("active");
            mainContent.classList.remove("shifted");
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
